export interface LanguageItem {
  code: string; // e.g., 'en', 'es', 'de'
  name: string; // e.g., 'English', 'EspaÃ±ol', 'Deutsch' (this might be a translation key itself)
  flag: string; // e.g., 'ğŸ‡ºğŸ‡¸', 'ğŸ‡ªğŸ‡¸', 'ğŸ‡©ğŸ‡ª'
}

export const LANGUAGES: LanguageItem[] = [
  { code: 'en', name: 'English', flag: 'ğŸ‡¬ğŸ‡§' }, // Or ğŸ‡ºğŸ‡¸ for US English
  { code: 'es', name: 'EspaÃ±ol', flag: 'ğŸ‡ªğŸ‡¸' },
  { code: 'de', name: 'Deutsch', flag: 'ğŸ‡©ğŸ‡ª' },
  { code: 'fr', name: 'FranÃ§ais', flag: 'ğŸ‡«ğŸ‡·' },
  // Add other languages your app will support
];

// It's also good practice to define your supported languages in your i18n setup.
// For example, in services/i18n.ts, you would list these codes 
// and provide corresponding .json translation files for each. 